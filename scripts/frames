#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const assert = require('assert')
const { exec, execSync } = require('child_process');
const { logger } = require('log-instance');
const { WaveFile } = require('wavefile');

// avoid Tensorflow include via ../index
const Chart = require('../src/chart');
const ResonatorBank = require('../src/resonator-bank');
const Signal = require('../src/signal');
const YinPitch = require('../src/yin-pitch');

const APP_DIR = path.dirname(__dirname);
const TEST_DATA_DIR = path.join(APP_DIR, 'test/data');
const EVAM_ME_SUTTAM_WAV = path.join(TEST_DATA_DIR, 'evam-me-suttam.wav');
const AN9_20_4_3_WAV = path.join(TEST_DATA_DIR, 'an9.20_4.3.wav');
const argv = process.argv;
const script = argv[1].split('/').pop();
const SOUND_END = path.join(APP_DIR, 'static/training-end.mp3');
const SOUND_SUCCESS = path.join(APP_DIR, 'static/training-success.mp3');
const SOUND_FAILURE = path.join(APP_DIR, 'static/training-failure.mp3');
const SOUND_ADJUST = path.join(APP_DIR, 'static/training-adjust.mp3');

function help() {
    console.log(`
NAME
        frames - frame analyzer

SYNOPSIS
        frames [OPTIONS] 
        frames -si INPUT_WAV 

DESCRIPTION
        Speech formant analyser detects F0, F1, F2 for given WAV signal.

    -cl, --chart-lines N
        Number of lines used to chart worst signal mismatch (15)

    -cf, --chart-frames F1 FN
        Print chart of frames [F1,FN]
      
    -?, --help
        Print help

    -fs, --frame-size
        Input is broken up into frames.

    -ll, --log-level
        Logging level: warn, error, [info], debug

    -sd, --std-dev
        Show standard deviations of each frame

    -si, --signal-in WAV_FILE
        Input signal 

`);
    process.exit(0);
}

function playSound(sound) {
  let cmd = `ffplay -nodisp -autoexit -loglevel error -stats ${sound}`;
  execSync(cmd, {
    cwd: APP_DIR,
  });
}

function die(e) {
  playSound(SOUND_FAILURE);
  process.exit(-1);
}

var cmdCfg = {};

var nargs = argv.length;
if (nargs < 3) {
    help();
}
for (var i = 2; i < nargs; i++) {
  var arg = argv[i];
  let requiredArg = (key=arg)=>{
    let nextArg = argv[++i];
    if (nextArg == null) {
      die(logger.error('E_REQUIRED', `Expected additional information for: ${key}`));
    }
    return nextArg;
  }
  let requiredNumber = (key=arg)=>{
    let n = Number(requiredArg(key));
    if (isNaN(n)) {
      die(logger.error(`[E_NUMBER] "${key}" option requires a number:${argv[i]}`));
    }
    return n;
  }
  if (i<2) { continue; }
  if (arg === '-?' || arg === '--help') {
    help();
    cmdCfg.fMax = requiredNumber();
  } else if (arg === '-cf' || arg === '--chart-frames') {
    cmdCfg.chartFrame1 = requiredNumber(arg);
    cmdCfg.chartFrameN = requiredNumber(arg);
    assert(cmdCfg.chartFrame1 <= cmdCfg.chartFrameN,
      `[E_CHART_FRAME] expected ${cmdCfg.chartFrame1} <= ${cmdCfg.chartFrameN}`);
  } else if (arg === '-fs' || arg === '--frame-size') {
    cmdCfg.frameSize = requiredNumber();
  } else if (arg === '-sd' || arg === '--std-dev') {
    cmdCfg.stdDev = true;
  } else if (arg === '-si' || arg === '--signal-in') {
    cmdCfg.signalIn = requiredArg();
  } else if (arg === '-ll' || arg === '--log-level') {
    cmdCfg.logLevel = logger.logLevel = requiredArg();
  } else {
    die(logger.error('E_UNKNOWN_OPTION', `Unknown option: ${argv[i]}`));
  }
}

async function wavSignal(fpath) {
  assert(fpath, `Expected signal file path: ${fpath}`);
  let buf = await fs.promises.readFile(fpath);
  let wf = new WaveFile(buf);
  //let wavSig = new Signal(wf.getSamples(false, Int16Array));
  let wavSig = Signal.fromWav(buf);
  let { sampleRate } = wavSig;
  let stats = wavSig.stats();
  logger.debug(`wavSignal`, fpath, stats);
  logger.info(`wavSignal() ${fpath} =>`, `max:`, stats.max, `count:`, stats.count,
    `sampleRate:`, sampleRate);

  return wavSig;
}

async function configuration(cfg=cmdCfg) {
  let { 
    signalIn, 
  } = cfg;

  assert(fs.existsSync(signalIn), `[E_SIGNAL_IN] file not found:${signalIn}`);

  return Object.assign({}, {
    chartLines: 15,
    frameSize: 192,
    logLevel: 'info',
    signalIn,
    verbose: false,

  }, cfg, {
  });
}

async function writeSignal(fpath, signal) {
  if (fpath.endsWith('.wav')) {
    let wav = signal.toWav();
    try {
      await fs.promises.writeFile(fpath, wav);
      logger.info(`writing signal: ${fpath} length: ${wav.length}`);
    } catch(e) {
      die(logger.error(`Could not write: ${fpath}`, e.message));
    }
  } else {
    die(logger.error('E_FILE_UNSUPPORTED', `Unsupported file type: ${fpath}`));
  }
}

function inputsOfFrames(frames, inputSize) {
  let frameSize = frames[0].length;
  let wavFrames = Math.ceil(inputSize / frameSize);
  let iEnd = frames.length - 1;
  let inputs = frames.map((f,i) => {
    let inputRow = [];
    for (let j=i; j < i+wavFrames; j++) {
      let fj = frames[j] || new Float32Array(frameSize);
      inputRow = inputRow.concat([...fj]);
    }
    return inputRow;
  });
  return inputs;
}

(async function() {
  let cfg = await configuration(cmdCfg);
  let msStart = Date.now();
  let { 
    chartLines,
    chartFrame1,
    chartFrameN,
    frameSize,
    signalIn, 
    stdDev,
    verbose,

  } = cfg;
  logger.info(script, argv.slice(2).join(' '));
  verbose && logger.info(`command options parsed as`, cfg);
  let chart = new Chart({lines:chartLines});
  let sigIn = await wavSignal(signalIn);
  let { data:sigData, sampleRate } = sigIn;

  if (stdDev) {
    for (let i = 0; i < sigData.length; i += frameSize) {
      let t = (i/sampleRate).toFixed(3);
      let frame = i / frameSize;
      let samples = sigData.subarray(i, i+frameSize);
      let stats = Signal.stats(samples);
      console.log(`${t}s frame:${frame} i:${i}`, 
        `stdDev:${stats.stdDev && stats.stdDev.toExponential(2)}`);
    }
  }

  if (!isNaN(chartFrame1)) {
    let title = `frames:[${chartFrame1},${chartFrameN}] frameSize:${frameSize}`;
    let data = sigData.subarray(chartFrame1*frameSize, (chartFrameN+1)*frameSize);
    chart.plot({title, data});
  }


  let elapsed = ((Date.now()-msStart)/60000).toFixed(1);
  process.exit(0);
})();

#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const assert = require('assert')
const { exec, execSync } = require('child_process');
const { logger } = require('log-instance');
const tf = require('@tensorflow/tfjs-node');
const { WaveFile } = require('wavefile');
const {
  Chart,
  Resonator,
  Signal,
} = require('../index');

const APP_DIR = path.dirname(__dirname);
const TEST_DATA_DIR = path.join(APP_DIR, 'test/data');
const EVAM_ME_SUTTAM_WAV = path.join(TEST_DATA_DIR, 'evam-me-suttam.wav');
const AN9_20_4_3_WAV = path.join(TEST_DATA_DIR, 'an9.20_4.3.wav');
const argv = process.argv;
const script = argv[1].split('/').pop();
const SOUND_END = path.join(APP_DIR, 'static/script-complete.mp3');
const SOUND_SUCCESS = path.join(APP_DIR, 'static/training-success.mp3');
const SOUND_FAILURE = path.join(APP_DIR, 'static/training-failure.mp3');
const SOUND_ADJUST = path.join(APP_DIR, 'static/training-adjust.mp3');

function help() {
    console.log(`
NAME
        resonate - Audio resonator

SYNOPSIS
        resonate [OPTIONS] 
        resonate -ns 11000 -so WAV_OUT

DESCRIPTION
        Resonator-based tone generator

    -cl, --chart-lines YLINES
        Chart signal with given number of lines for y-coordinate (10)

    -cw, --chart-wrap LINELENGTH
        Split chart to given line length (90)

    -fm, --frequency-milliseconds HZ MILLISECONDS
        Add sample of given frequency with given duration in milliseconds (200 500)

    -?, --help
        Print help

    -ll, --log-level
        Logging level: warn, error, [info], debug

    -pa, --peak-amplitude
        Half of signal peak-to-peak amplitude (16384)

    -rr, --resonator-r RVAL
        Set resonator r value (0.99)

    -so, --signal-out WAV_FILE
        Output file

    -sr, --sample-rate SAMPLERATE
        Sample rate (22050)
    
    -vb, --verbose
        Verbose logging (false)

`);
    process.exit(0);
}

function playSound(sound) {
  let cmd = `ffplay -nodisp -autoexit -loglevel error -stats ${sound}`;
  execSync(cmd, {
    cwd: APP_DIR,
  });
}

function die(e) {
  playSound(SOUND_FAILURE);
  process.exit(-1);
}

var cmdCfg = {};

var nargs = argv.length;
if (nargs < 3) {
    help();
}
for (var i = 2; i < nargs; i++) {
  var arg = argv[i];
  let requiredArg = ()=>{
    let nextArg = argv[++i];
    if (nextArg == null) {
      die(logger.error('E_REQUIRED', `Expected additional information for: ${arg}`));
    }
    return nextArg;
  }
  let requiredNumber = (iCmd=i-1)=>{
    let n = Number(requiredArg());
    if (isNaN(n)) {
      die(logger.error(`[E_NUMBER] "${argv[iCmd]}" option requires a number:${argv[i]}`));
    }
    return n;
  }
  if (i<2) { continue; }
  if (arg === '-?' || arg === '--help') {
    help();
  } else if (arg === '-fm' || arg === '--frequency-milliseconds') {
    let iCmd = i;
    let resonances = cmdCfg.resonances = cmdCfg.resonances || [];
    let frequency = requiredNumber(iCmd);
    let milliseconds = requiredNumber(iCmd);
    resonances.push({frequency, milliseconds});
  } else if (arg === '-so' || arg === '--signal-out') {
    cmdCfg.signalOut = requiredArg();
  } else if (arg === '-cl' || arg === '--chart-lines') {
    cmdCfg.chartLines = requiredNumber();
  } else if (arg === '-cw' || arg === '--chart-wrap') {
    cmdCfg.chartWrap = requiredNumber();
  } else if (arg === '-pa' || arg === '--peak-amplitude') {
    cmdCfg.peakAmplitude = requiredNumber();
  } else if (arg === '-rr' || arg === '--resonator-r') {
    cmdCfg.resonatorR = requiredNumber();
  } else if (arg === '-sr' || arg === '--sample-rate') {
    cmdCfg.sampleRate = requiredNumber();
  } else if (arg === '-ll' || arg === '--log-level') {
    cmdCfg.logLevel = logger.logLevel = requiredArg();
  } else if (arg === '-vb' || arg === '--verbose') {
    cmdCfg.verbose = true;
  } else {
    die(logger.error('E_UNKNOWN_OPTION', `Unknown option: ${argv[i]}`));
  }
}

async function wavSignal(fpath) {
  assert(fpath, `Expected signal file path: ${fpath}`);
  let buf = await fs.promises.readFile(fpath);
  let wf = new WaveFile(buf);
  let wavSig = new Signal(wf.getSamples(false, Int16Array));
  let stats = wavSig.stats();
  logger.debug(`wavSignal`, fpath, stats);
  logger.info(`wavSignal() ${fpath} =>`, `max:`, stats.max, `count:`, stats.count);

  return wavSig;
}

async function configuration(cfg=cmdCfg) {
  let { 
  } = cfg;

  return Object.assign({}, {
    chartLines: 10,
    chartWrap: 90,
    logLevel: 'info',
    sampleRate: 22050,
    peakAmplitude: 16384,
    resonatorR: 0.99,
    signalOut: undefined,
    verbose: false,

  }, cfg, {
  });
}

function assertNumbers(inputs, msg) {
  inputs.forEach((input,i)=> {
    if (typeof input === 'number') {
      assert(!isNaN(input), `${msg}[${i}]:${input}`);
    } else {
      let nans = input.reduce(((a,v)=> isNaN(v) ? a+1 : a), 0);
      assert(!nans, `${msg}[${i}] has NaNs:`+
        [...input].map(v=>isNaN(v)?'N':'.').join(''));
    }
  });
}

async function writeSignal(fpath, signal) {
  if (fpath.endsWith('.wav')) {
    let wav = signal.toWav();
    try {
      await fs.promises.writeFile(fpath, wav);
      logger.info(`writing signal: ${fpath} length: ${wav.length}`);
    } catch(e) {
      die(logger.error(`Could not write: ${fpath}`, e.message));
    }
  } else {
    die(logger.error('E_FILE_UNSUPPORTED', `Unsupported file type: ${fpath}`));
  }
}

(async function() {
  let cfg = await configuration(cmdCfg);
  let msStart = Date.now();
  let { 
    chartLines,
    chartWrap,
    peakAmplitude,
    resonances=[],
    resonatorR,
    sampleRate,
    signalOut,
    verbose,
  } = cfg;
  logger.info(script, argv.slice(2).join(' '));
  logger.info(`command options parsed as`, cfg);

  if (resonances.length === 0) {
    resonances.push({frequency:200, milliseconds:500});
  }

  let resonator = new Resonator({r:resonatorR});
  let data = [];
  resonances.forEach(resonance=> {
    let { frequency, milliseconds } = resonance;
    let nSamples = Math.round(milliseconds * sampleRate / 1000);
    console.log(`nSamples`, {nSamples, milliseconds, sampleRate});
    let frequency1 = frequency ? frequency : resonator.frequency;
    let scale1 = frequency ? peakAmplitude : 0;
    let signal = resonator.resonate({ frequency1, nSamples, scale1, });
    data = data.concat(signal);
  });

  let elapsed = ((Date.now()-msStart)/1000).toFixed(1);
  let sig16 = new Signal(Signal.toInt16Array(data));
  let chart = new Chart({lines:chartLines, lineLength: chartWrap});
  let xInterval = 8;
  let chartSamples = data.length; //2*550;
  let title = `xInterval:${xInterval} chartSamples:${chartSamples}`;
  verbose && chart.plot({title, data:sig16.data.slice(0,chartSamples), xInterval});
  if (signalOut) {
    await writeSignal(signalOut, sig16);
    playSound(signalOut);
  }
  logger.info(`elapsed ${elapsed}s`);
  playSound(SOUND_END);
  process.exit(0);
})();
